Hello everyone,

I will try to explain the theory of Docker and container architecture to someone who has no prior knowledge.

Docker, which has become very popular and widely used in the industry recently, is the darling of DevOps engineers and developers. It is an essential component of the agile software architecture.

In simple terms, Docker is a software used for application virtualization.

Even understanding this simple definition can be challenging for someone who knows nothing about it.

Let’s break it down using the divide and conquer algorithm, as I usually do, to understand it.

The first thing we need to understand is virtualization.

So what is virtualization?

To understand virtualization, we need to know the server and application architecture before virtualization technologies.

Monolithic and microservices architecture It all starts with the need to deliver a software application through a server.

Let’s say we have a software application that we want to serve to users. The architecture we choose will determine the technologies we use for this service.

Virtualization, as a concept in the industry, refers to the technologies developed to efficiently use resources such as RAM, CPU, Disk, and even the operating system to ensure efficient resource utilization and isolation.

If we want to perform virtualization at the operating system level, we have options like VMware vSphere, Microsoft Hyper-V, and so on.

If we want to perform application virtualization, Docker stands out among different software options.

So, what is the difference between application and operating system virtualization? Let’s assume we have a simple web application consisting of three components: Front-end, Back-end, and Database.

If we wanted to deploy these applications according to the monolithic architecture, we would need three physical servers and the respective operating systems running on them, along with the necessary software dependencies for the application’s operation.

However, if we use operating system virtualization technology to reduce maintenance and server costs, and set up one virtualized operating system on a single server, and then install three separate operating systems on top of it, along with the front-end, back-end, and database applications, we can reduce our costs by one step.

Taking it a step further, we can optimize by packaging the application and its dependencies into a container. We can achieve this using Docker technology. We can model the front-end, back-end, and database components as separate container services and take advantage of the benefits that this technology brings. This allows us to improve service quality, increase productivity, and reduce costs.

In summary, Docker is an application virtualization technology. It involves packaging all the dependencies required for an application to run inside a container and ensuring that this container can run on any operating system. Operating system virtualization, on the other hand, is a technology used to run multiple instances of operating systems on a physical machine.
